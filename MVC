
* MVC 패턴 디자인패턴 중 하나인 MVC 패턴 *

MVC패턴은 디자인패턴 중 하나 디자인 패턴이란 프로그램이나 어떤 특정한 것을 
개발하는 중에 발생했던 문제점들을 정리해서 상황에 따라 간편하게 적용해서
쓸 수 있는 것을 정리하여 특정한 "규약"을 통해 쉽게 쓸 수 있는 형태로 만든 것을 말합니다.
 "좀 더 쉽고 편리하게" 사용할 수 있게 만든 특정한 방법들을 디자인 패턴이라고 합니다.
 그러한 디자인 패턴이라는 것은 스트래지 패턴, 옵저버 패턴 등이 있습니다.
 
 * MVC? *
 
 Model, View, COntroller의 약자 하나의 애플리케이션,
 프로젝트를 구성 할때에 그 구성 요소를 세가지의 역할로 구분한 패턴입니다.
 
 *Model*
 
애플리케이션의 정보, 데이타를 나타냅니다. 데이타베이스, 처음의 정의하는 상수, 초기화값, 변수 등을 뜻합니다. 또한 이러한 DATA, 정보들의 가공을 책임지는 컴포넌트를 말합니다.
이 모델은 다음과 같은 규칙을 가지고 있습니다.

    1.사용자가 편집하길 원하는 모든 데이터를 가지고 있어야 함
    
    2.뷰나 컨트롤러에 대해서 어떤 정보도 알지 말아야 한다.
    
    3.변경이 일어나면, 변경 통지에 대한 처리 방법을 구현 해야만 한다.

*View*

input 텍스트, 체크박스 항목 등과 같은 사용자 인터페이스 요소를 나타냅니다. 다시 말해 데이터 및 객체의 입력, 그리고 보여주는 출력을 담당합니다. 데이타를 기반으로 사용자들이 볼 수 있는 화면입니다.  
뷰에서는 다음과 같은 규칙들이 있습니다.   
   
   1. 모델이 가지고 있는 정보를 따로 저장해서는 안된다.
   
   2. 모델이나 컨트롤러와 같이 다른 구성요소들을 몰라야 된다.
   
   3. 변경이 일어나면 변경통지에 대한 처리방법을 구현해야만 한다.
   
   
*Controller*

데이터와 사용자인터페이스 요소들을 잇는 다리역할을 합니다.
즉, 사용자가 데이터를 클릭하고, 수정하는 것에 대한 "이벤트"들을 처리하는 부분을 뜻합니다.  
컨트롤러 또한 다음과 같은 규칙을 이해해야 합니다.

  1. 모델이나 뷰에 대해서 알고 있어야 한다.
  
  2. 모델이나 뷰의 변경을 모니터링 해야 한다.
  
  
  *왜 MVC패턴을 사용해야 할까.*
  
사용자가 보는 페이지, 데이터처리, 그리고 이 2가지를 중간에서 제어하는 컨트롤,
이 3가지로 구성되는 하나의 애플리케이션을 만들면 각각 맡은바에만 집중을 할 수 있게 됩니다. 
공장에서도 하나의 역할들만 담당을 해서 처리를 해서 효율적이게 됩니다. 여기서도 마찬가지입니다.

서로 분리되어 각자의 역할에 집중할 수 있게끔하여 개발을 하고 그렇게 애플리케이션을 만든다면,
유지보수성, 애플리케이션의 확장성, 그리고 유연성이 증가하고, 중복코딩이라는 문제점 또한 사라지게 되는 것입니다.
그러기 위한 MVC패턴입니다.


*MVC패턴의 의의*

MVC패턴은 결국 "어떻게 나눌 것인가"에 대한 해답 중 하나입니다. 
어떤 특정한 역할들에 대해 역할분담을 할 때 가이드라인을 제시하는 방법 중 하나가 바로 MVC패턴이라는 것입니다.
그리고 이 패턴을 사용한 라이브러리나 프레임워크로 프로그래밍을 한다면 정말 쉽고 
그리고 재밌는 경험을 느낄 수 있으며 아름다운 코드가 탄생하게 됩니다. 물론 우리는 그러한 라이브러리나 
프레임워크를 만들 수 있는 실력또한 길러야 하지만요.  

출처:https://m.blog.naver.com/jhc9639/220967034588
